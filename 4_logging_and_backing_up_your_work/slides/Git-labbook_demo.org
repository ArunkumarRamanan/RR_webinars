#+TITLE: Demonstrating Git-labook Prototype in Action
#+AUTHOR:    V. Danjean, A. Legrand, L. Stanisic\newline University of Grenoble, CNRS, Inria Bordeaux
#+DATE: June 7, 2016 -- Reproducible Research Webinar (Episode IV)


* Installation of Git-labbook

  You can clone git-labbook from GitHub and install it using
  Makefiles.

#+begin_src sh :results none :session org-sh :dir /tmp/
git clone git@github.com:Git-labbook/git-labbook.git git-labbook
cd git-labbook

make Makefile.PL
make
#+end_src

  At this point, there are certain perl package requirements and the
  list is available on the project [[https://github.com/Git-labbook/git-labbook][homepage]]. Please indicate if some
  packages are missing for you or if you have any problems installing
  the software.
  
* Simple Use Case: Parallel Quicksort study

  To demonstate git-labbook commands, we are using an already
  performed reproducible research example [[https://github.com/stanisic/RR_example][RR_example]]. Commits of
  RR_example have been transformed into patches, that we simply apply
  in the following demo. This way, the main focus stays on Git
  branching system and git-labbook commands. However, we still
  encourage readers to explore the content of the RR_example study
  (especially LabBook.org) as it contains many useful tips about
  properly writing laboratory notebook.

* Demo
** Initialization

  Cleanup and environment preparation.

#+begin_src sh :results output :session org-sh
set -ex

cd scenario.d 

mkdir -p repo
rm -rvf repo/* 
rm -rf repo/.??* 
rm -rvf repoMachine2/*
rm -rf repoMachine2/.??*

DATADIR="$(pwd)/data"
export PATH="$(pwd)/../blib/script:$(pwd)/../bin:/home/vdanjean/debian/mainteneur/org-merge-driver/upstream/org-merge-driver/build/src:$PATH"
export PERL5LIB="$(pwd)/../blib/lib:$(pwd)/../lib:$PATH"
#+end_src

  Check that options are correctly connected to config variables.

#+begin_src sh :results output :session org-sh
git-labbook help
#+end_src

  Initialize Git repository, add few commits.

#+begin_src sh :results output :session org-sh
mkdir -p repo
cd repo

git init
git am $DATADIR/000[1234]-*
#+end_src

  Initialize Git-labbook. This creates the whole directory structure,
  laboratory notebook file and an initial commit.

#+begin_src sh :results output :session org-sh
git-labbook init
#+end_src

  Adding some scripts into data branch.

#+begin_src sh :results output :session org-sh
git checkout data
git am $DATADIR/001[0]-*
#+end_src

** Doing first experiments

   Start first experimental campaign by creating a new experimental
   branch.

#+begin_src sh :results output :session org-sh
git checkout master
git-labbook xp start xp1 --branch xp1 --no-labbook-entry
#+end_src

   Do some modifications, execute the experiments and add the measured
   data.

#+begin_src sh :results output :session org-sh
git am $DATADIR/000[56]-*
#+end_src

   Continue doing some modifications inside the master branch. One may
   also realize that some code in the experimental branch is useful
   for the whole project, so it can be cherry-picked into the source
   branch.
   
#+begin_src sh :results output :session org-sh
git checkout master
git am $DATADIR/000[78]-*

git am $DATADIR/001[12345]-*
#+end_src

   Go back to the experiment branch and improve laboratory notebook
   text.

#+begin_src sh :results output :session org-sh
git checkout xp1
git am $DATADIR/000[9]-*
#+end_src

   When concluded that experiments are finished, merge the
   experimental branch into data branch.

#+begin_src sh :results output :session org-sh
git checkout xp1
git-labbook xp finish
#+end_src

   Repeat a similar process for another experimental campaign.

#+begin_src sh :results output :session org-sh
git-labbook xp start xp2
git am $DATADIR/001[6]-*

git checkout data
git am $DATADIR/001[7]-*

git checkout xp/xp2
git-labbook xp finish
#+end_src

   Additionally, when a certain important source code developments are
   performed, one can add a Git tag (typically for the code releases).

#+begin_src sh :results output :session org-sh
git checkout master
git am $DATADIR/001[9]-*
git tag stable0.9
#+end_src

** Performing experiments on another machine

   One might want to perform experiments on another machine. For that,
   first the project needs to be cloned. In this example, this is
   simply done in another folder of the same computer, but it can be
   done similarly from a different machine.

#+begin_src sh :results output :session org-sh
cd ..
git-labbook clone repo repoMachine2
cd repoMachine2
#+end_src

   Start experiments on that machine.

#+begin_src sh :results output :session org-sh
git-labbook xp start xp3 -b xp3 --no-labbook-entry
git am $DATADIR/002[01234]-*
#+end_src

   At some point, push the experiments to the remote repository.

#+begin_src sh :results output :session org-sh
git-labbook xp push
#+end_src

   When the experimental campaign is finished, the experimental branch
   can be merged into the data branch.

#+begin_src sh :results output :session org-sh
cd ..
cd repo

git checkout xp3
git-labbook xp finish
#+end_src

   At the end, the whole study is reproduced!

#+begin_src sh :results output :session org-sh
git checkout master
git am $DATADIR/002[6]-*

echo "SUCCESS REBUILD"
#+end_src


