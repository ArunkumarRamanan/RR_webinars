#+TITLE:     Reproducible Research, Open Science \newline \bgroup\bf Logging and backing up your work\egroup \newline Git Tips and Tricks, a Scientist Perspective
#+AUTHOR:    V. Danjean, A. Legrand, L. Stanisic\newline University of Grenoble, CNRS, Inria Bordeaux
#+DATE: June 7, 2016 -- Reproducible Research Webinar (Episode IV)

#+STARTUP: beamer overview indent
#+TAGS: noexport(n)
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [11pt,xcolor=dvipsnames,presentation]
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+TAGS: Vincent(V) Arnaud(A) Luka(L)

#+LATEX_HEADER: \let\AtBeginDocumentSav=\AtBeginDocument
#+LATEX_HEADER: \def\AtBeginDocument#1{}
#+LATEX_HEADER: \input{org-babel-style-preembule.tex}
#+LATEX_HEADER: \let\AtBeginDocument=\AtBeginDocumentSav

#+LATEX_HEADER: %\let\tmptableofcontents=\tableofcontents
#+LATEX_HEADER: %\def\tableofcontents{}
#+LATEX_HEADER:  \usepackage{color,soul}
#+LATEX_HEADER:  \definecolor{lightorange}{rgb}{1,.9,.7}
#+LATEX_HEADER:  \sethlcolor{lightorange}
#+LATEX_HEADER:  \definecolor{lightgreen}{rgb}{.7,.9,.7}
#+LATEX_HEADER:  \let\hrefold=\href
#+LATEX_HEADER:  \renewcommand{\href}[2]{\hrefold{#1}{\SoulColor{lightorange}\hl{#2}}}
#+LATEX_HEADER: \newcommand{\muuline}[1]{\SoulColor{lightorange}\hl{#1}}
#+LATEX_HEADER: \makeatletter
#+LATEX_HEADER: \newcommand\SoulColor[1]{%
#+LATEX_HEADER:   \sethlcolor{#1}%
#+LATEX_HEADER:   \let\set@color\beamerorig@set@color%
#+LATEX_HEADER:   \let\reset@color\beamerorig@reset@color}
#+LATEX_HEADER: \makeatother
#+LATEX_HEADER: \let\oldtexttt=\texttt
#+LATEX_HEADER: \renewcommand\texttt[1]{\SoulColor{lightgreen}\hl{\tt#1}}

*** TODO Stuff to do [3/7]                                       :noexport:
- [X] Slide 3 items are strange
- [ ] Update the Introduction
- [ ] Update Git for Coding
- [ ] Scavange the pad (https://pad.inria.fr/p/fQtZqvTTERRqx9ug)
- [X] Find a way so that =inline commands= display nicely (e.g.,
  highlighted in green).
- [X] Strange space sometimes before links and green git commands (e.g., after left parenthesis)
- [ ] Include sharelatex into presentation
** 
#+LaTeX: \input{org-babel-document-preembule.tex}
*** Foreword about the organization (1/2)
There is currently a screencast of this seminar:
#+BEGIN_CENTER
  #+LaTeX: \href{https://mi2s.imag.fr/pm/direct}{https://mi2s.imag.fr/pm/direct}
#+END_CENTER
The resulting video will be edited and available from GitHub that
gathers all the information, slides, and resources:
#+BEGIN_CENTER
  #+LaTeX: \href{https://github.com/alegrand/RR_webinars/blob/master/README.org}{https://github.com/alegrand/RR\_webinars/blob/master/README.org}
#+END_CENTER

There is a few seconds delay between what we say and the
screencast. We can have almost live interaction with other sites by
using *pad* to comment and ask questions
#+BEGIN_CENTER
  #+LaTeX: \href{http://tinyurl.com/RRW-pad4}{http://tinyurl.com/RRW-pad4}
#+END_CENTER
*** Foreword about the organization (2/2)
No particular prerequisites: we will use command line and demo with a
GUI.
- Please install =Git= and =SmartGit= by following the [[https://github.com/alegrand/RR_webinars/blob/master/4_logging_and_backing_up_your_work/index.org\#practical-session-requirements][instructions given
  on the RR_webinars GitHub page]]


- 1. General introduction plus basic Git usage :: ($\approx$ an hour) 
     At any time, feel free to ask questions *on the pad*. Some of these
     questions may be addressed "silently" by the other attendees, but
     do not hesitate to ask it out loudly for the remote ones
- 2. A short break :: 
- 3. Slightly more advanced Git usage :: the actual part that is more
     devoted to practices favoring reproducible research
**** Many other tutorials on Git but with a different perspective
- [[https://www.youtube.com/watch?v=ZDR433b0HJY][Introduction to Git internals by Scott Chacon (GitHub)]] 
- [[https://www.youtube.com/watch?v=o4PFDKIc2fs][Please. Stop Using Git by Matthew McCullough]] $\winkey$
#+LaTeX: \vspace{-1em}\begin{columns}\begin{column}[t]{.42\linewidth}
- \href{http://try.github.com/}{http://try.github.com/}
- \href{http://gitimmersion.com/}{http://gitimmersion.com/}
#+LaTeX: \end{column}\hspace{-1.2em}\begin{column}[t]{.59\linewidth}
- \href{http://git-scm.com/docs/gittutorial/}{http://git-scm.com/docs/gittutorial/}
#+LaTeX: \end{column}\end{columns}

*** Outline
\tableofcontents
* Introduction to Git and its Eco-system
*** Git principle
    - nothing vs dropbox (email ?)
    - dropbox vs. RCS (CVS, svn)
    - git vs. svn
        + sidenote there is git-svn for those that have to stick with svn

    - side note on mercurial, bzr, darc, etc.
    - what is gforge, github, gitlab(inria: https://gitlab.irisa.fr/), bitbucket (offers private repositories) ?
*** Git technical glitches
 - command line vs. GUI (recommend =SmartGit=, mention =magit= for emacs
   lovers)
 - ssh configuration (public/private key principle to avoid typing it
   all the time)
   - config: example config
   - autosetuprebase = always ou pas ?....
*** Basic usage (demo)
#+BEGIN_LaTeX
    \vspace{-.8em}
    \begin{center}
    \includegraphics[width=.9\linewidth]{figures/git_basic.pdf}\\%
    \end{center}
    %
    \vspace{-.8em}
    \begin{flushright}
      \tiny
      \emph{Inspired by \href{https://github.com/HackBerkeley/intro-git}{HackBerkeley}}
    \end{flushright}
    \vspace{-.8em}
#+END_LaTeX

You have a complete stand-alone local history!\dots

- =git clone= / =git init= (initialize the DB)
- =git pull= sync from the remote repos
  - (actually =git pull= = =git fetch ; git rebase= in simple contexts)
- =git push= sync to the remote repos
- =git add= and =git commit= (or =git commit -a= if you really don't care)

This is the basic *linear history*, very similar to an incremental
backup.
- If you put such commands in a =crontab -e=, you will get a
  =timemachine/backuppc/...=

But =git= is much more than this.
*** Actually there are branches... (demo)
- =git merge=
- gitk or equivalent
  - =git checkout=
- =git pull= $=$ =git fetch; git rebase= or =git fetch; git merge=
  - Question: What is the difference ? $\winkey$

* Git for Writing Articles
*** Outline
#+LaTeX: \tableofcontents[current,currentsubsection]
*** Challenges: History and Parallelism
#+LaTeX: \vspace{-.3cm}
****                                                     :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
***** 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.55
     :END:

- Printed doc+handwritten revisions:
  + Many versions of the file
  + One writer, multiple reviewers
\smallskip
- Doc+email+contributions: 
  + Many versions of the file
  + Never sure which one is the latest
  + Not aware of others corrections
  + No clear history
  + Problems editing same paragraphs
\smallskip
- Doc+Dropbox or google-doc:
  + Limited history through autosaves
  + Limited parallelism

***** 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.45
     :END:

#+BEGIN_CENTER
\includegraphics[scale=.25]{figures/phd_comics.png}
#+END_CENTER

****                                                     :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

\medskip
#+BEGIN_CENTER
Git allows for a truly *parallel asynchronous* approach
#+END_CENTER

*** Collaborative Writing using Git
- Multiple collaborators editing the same file *simultaneously offline*
- Everyone *commits locally*, occasionally merging to remote
- If editing different paragraphs
  $\leadsto$ *automatic merge*
- If editing same paragraphs
  $\leadsto$ need to *handle conflicts*

\medskip 
#+BEGIN_CENTER
Everyone has a clean history of the whole article writing process,\\ with all intermediary versions
#+END_CENTER


*** Working with Textual Files
- Necessary so Git can make difference between commits
- Common solutions: LaTeX, markdown, Org-mode, etc.
- Nowadays many user-friendly environments for LaTeX
- No dependencies on (proprietary) software tools

\medskip
**** Advanced usage
Alternatively convert binaries into text files:
  + =git oodiff= (based on odt2txt conversion) for OpenOffice files (.odt, .odp, etc.)
  + [[http://blog.martinfenner.org/2014/08/18/introducing-rakali/][rakali]] (based on pandoc conversion) for Office files (.doc, .docx, etc.) 

*** Typical Workflow
- Basic commands:
  1. Setup repository (=git config=, =git clone=)
  2. Update to the latest version (=git pull=, =git fetch=)
  3. Contribute with your changes (=git commit -a=, =git push=)
- Commands for handling conflicts:
  1. Compare two versions (=git diff=)
  2. Use conflict solvers
  3. Merge or rebase (=git merge=, =git rebase=)
- Commands for finding the previous version:
  1. Going for a particular version (=git checkout SHA1=)

*** Useful Tips and Tricks
- Don't version temporary LaTeX files (.aux, .toc, etc.), use .gitignore list
- Don't version the article .pdf file, unless your collaborators have problems generating it
- Add only the final version of the .pdf, possibly with a unique name
- Avoid very long lines
- Compare versions by words not lines (=git wdiff=)
- Do frequent local commits - it's safe $\smiley$

\medskip
**** Advanced usage
If you collaborate with SVN users, you may enjoy =git svn=

* Git for Coding
*** Outline
#+LaTeX: \tableofcontents[current,currentsubsection]
*** Git for coding (history matters!)
- Remember: _commit often_. In this context, the =git stash= command can
  be useful.
  - Allows you to code/test/... with no fear
  - =git reset= / =git revert=
- Region based committing (=git commit --patch= although nobody does
  that through the CLI)
  - Working at a fine granularity allows the next ones to better
    understand what was done and decreases the risks of conflicts
- Locally rewriting your history (=git rebase -i bc23b0f=) before
  publishing it with =git push=
- Such history can then be exploited:
  - =git log= (=git hist=), =git blame=, =git bisect=
*** Rescue ! Advanced?
- =git reflog= (4 emergency) generally more useful than git fsck
- =git gc= / =git prune=
*** Git for coding (branches)
- merging branches
  - Example from the Scott Chacon youtube video: translating some code
    for internationalization
  - merging ("public" branch but where you're the only developer)
    vs. rebasing (provides a cleaner final set of patches, but the
    backup is more complex to set up) . Depends on the meaning of the
    history wished within the global project. The rebase can be better
    for code review (sometimes, some part of the history are useless).

Developers who do not understand this mechanism quickly end up with a
huge plate of spaghetti $\frowny$
- =git workflow= (supported by SmartGit)
*** Git Workflow

#+BEGIN_CENTER
\includegraphics[scale=.15]{figures/git_workflow.png}\\%
#+END_CENTER

*** Access rights
Git is a *distributed* version control system:
- Linux: Linus integrates and everyone pulls from him
- Forge philosophy: groups
- GitHub philosophy: organization possible but mainly fork and pull
  requests

*** Pull request: Choose you favorite illustration

****                                                            :B_column:
:PROPERTIES:
:BEAMER_env: column
:END:
***** 								      :BMCOL:
      :PROPERTIES:
      :BEAMER_col: .5
      :END:

#+BEGIN_CENTER
\includegraphics[scale=.15]{figures/pullrequest.png}
#+END_CENTER
# http://acrl.ala.org/techconnect/post/2013/05
***** 								      :BMCOL:
      :PROPERTIES:
      :BEAMER_col: .5
      :END:

#+BEGIN_CENTER
\includegraphics[scale=.22]{figures/pullrequest2.jpg}      
#+END_CENTER
# http://www.slideshare.net/psquy/git-collaboration

****                                                            :B_column:
:PROPERTIES:
:BEAMER_env: column
:END:

***** 								      :BMCOL:
      :PROPERTIES:
      :BEAMER_col: .5
      :END:

#+BEGIN_CENTER
\includegraphics[scale=.2]{figures/pullrequest3.png}
#+END_CENTER

# http://www.gulistanboylu.com/how-to-send-pull-request-on-github/
***** 								      :BMCOL:
      :PROPERTIES:
      :BEAMER_col: .5
      :END:

#+BEGIN_CENTER
\includegraphics[scale=.2]{figures/pullrequest4.jpg}      
#+END_CENTER

# http://www.slideshare.net/lemonlatte/git-tutorial-ii
* Git for Experiments/Data/Provenance Tracking
*** Outline
#+LaTeX: \tableofcontents[current,currentsubsection]
*** Git for Laboratory Notebook
- Versioning *all scripts* for running experiments, pre-processing raw data, analysis and presentation
- Backing up *read-only* experiment results
- *Commit often* and separate different types of commits
- Git history helps in *understanding* and *reproducing* experiment results

\medskip
**** Major Challenges
  - May depend on other projects
  - Large files and thus repositories
  - Linear history hard to explore and thus exploit

*** Integrating Multiple Git Sources

#+BEGIN_LaTeX
\begin{center}
\fbox{\includegraphics[width=.6\linewidth]{figures/submodules.pdf}}
\end{center}
#+END_LaTeX

- Pulling and pushing changes to both projects
- Several solutions (=git submodule=, =git subrepo=)
- Work well for simple Git inside Git, but not for advanced use cases (SVN, complex branches, etc.)

*** Handling Large Files

- Cloning takes forever $\frowny$
- Occupies a lot of disk space (especially for multiple projects)
- Several solutions (=git lfs=, =git annex=)
- Probably soon becoming part of the standard (similar to Mercurial)

*** Improving Git History: git xp (demo)
#+BEGIN_LaTeX
\begin{figure}
  \centering

  \includegraphics<1>[width=.6\linewidth]{figures/gitxp.pdf}
  \includegraphics<2>[width=.6\linewidth]{figures/gitxp2.pdf}

\end{figure}
#+END_LaTeX

  - Get the data you're interested in
  - Track provenance (can also be done in labbook)
  - Explore and reset experiment conditions
  - Expand to write an article

*** Benefits from Proposed Branching System
#+BEGIN_LaTeX
\begin{figure}
  \centering

  \includegraphics<1>[width=.8\linewidth]{figures/author_reader_br_1.fig}
  \includegraphics<2>[width=.8\linewidth]{figures/author_reader_br_2.fig}
  \includegraphics<3>[width=.8\linewidth]{figures/author_reader_br_3.fig}

\end{figure}
#+END_LaTeX

#+BEGIN_LaTeX
\begin{itemize}
   \item<1->Keeps data and code that generated it together, yet isolated
   \item<2->Facilitates experiment reproduction and analysis replication
   \item<3>Unites all phases of typical research study
\end{itemize}
#+END_LaTeX

* Git for Publishing
*** Outline
#+LaTeX: \tableofcontents[current,currentsubsection]
*** Making Repository Publicly Available
- External researchers can improve or build upon your work
- Exploring Git history allows for deeper understanding of the project evolution, not only the final results
  $\leadsto$ *improved reproducibility*

\medskip

- Comes as a natural step if the initial study was performed with a clean methodology ([[https://anonsvn:anonsvn@gforge.inria.fr/plugins/scmgit/cgi-bin/gitweb.cgi?p=starpu-simgrid/starpu-simgrid.git;a=tree][example]])
- Some may have valid reasons for not doing so (copyright, company policy, implementation parts that the authors do not wish to disclose now, etc.)

*** Making Repositories Citeable and Durable
**** _Citable_: GitHub + Zenodo
- Providing DOI to the release of your GitHub 
#+BEGIN_LaTeX
\centering
\hrefold{https://zenodo.org/badge/latestdoi/10971/stanisic/RR\_example}{\includegraphics[scale=.5]{figures/zenodo_51269.png}}
#+END_LaTeX
- Your code becomes "citable" (\bgroup \small although not necessarily
  easier to access \winkey\egroup)
- Easy to use: [[https://guides.github.com/activities/citable-code/][follow the instructions]]
- [[https://github.com/arfon/fidgit][GitHub+figshare]]: similar approach for figshare

**** _Durable_: Software Heritage
#+BEGIN_LaTeX
\begin{flushright}
  \includegraphics[width=.4\linewidth]{figures/software_heritage.png}
\end{flushright}
\vspace{-4.5em}
#+END_LaTeX
- None of this archiving is really durable\\
  \bgroup \small (Google Code, Gitorious, Code Spaces, ...)\egroup
- Impressive ongoing work lead by Roberto Di Cosmo
  #+BEGIN_LaTeX
  \begin{center}
    \href{https://wg.softwareheritage.org/}{https://wg.softwareheritage.org/}
  \end{center}
  #+END_LaTeX
  \bgroup \small Full development history of Debian, github, GNU,
  gitorious, google code, ... \egroup
* Conclusion and Perspective
** 
*** Outline
#+LaTeX: \tableofcontents
*** Where do we stand now?
*We did one such webinar per month*. We will stop during summer and
resume in mid September with other topics (workflows, data and
software archiving, evaluation challenges, ...).
- I need volunteers! $\smiley$
- Announcement on 
  [[http://listes.univ-orleans.fr/sympa/subscribe/recherche-reproductible][\small recherche-reproductible@listes.univ-orleans.fr\normalsize]] and
  a few others but do not hesitate to crosspost.

\textbf{Next webinars:} New season in September!

#+BEGIN_CENTER
  #+LaTeX: \vspace{-.4em}
  #+LaTeX: \href{https://github.com/alegrand/RR_webinars/blob/master/README.org}{https://github.com/alegrand/RR\_webinars}
#+END_CENTER
* Git demo                                                         :noexport:
** Basic operations

Alice clones the project.
#+begin_src sh :results output :session Alice
cd /tmp/
# Download the project
git clone "out mini project"
cd "out mini project"
# Update to the latest version
git pull
#+end_src

Bob clones the same project.
#+begin_src sh :results output :session Bob
cd /tmp/
# Download the project
git clone "out mini project"
cd "out mini project"
# Update to the latest version
git pull
#+end_src

Alice makes a change to an existing file and adds a new one.
#+begin_src sh :results output :session Alice
# Edit existing file
# editor file1
# Check the current changes in Working directory
git status
# Adding the modifications to the Index
git add file1
# Check the current changes in Working directory
git status
# Create a new file and write something inside
# editor file2
# Check the current changes in Working directory
git status
# Add the file to the Index
git add file2
# Check the current changes in Working directory
git status
# Commiting indexed changes to the Local Repository
git commit -m "explain type of changes"
# Check the current changes in Working directory
git status
# Pushing changes to the Remote Repository
git push
#+end_src

Bob gets the modifications.
#+begin_src sh :results output :session Bob
# Check the current changes in Working directory
git status
# Update to the latest version
git pull
#+end_src 

** Create and solve conflict

Bob is working on two files.
#+begin_src sh :results output :session Bob
# Edit file1 on a separate part
# editor file1
# Edit file2 on a common part
# editor file2
git commit -am "explain type of changes"
git push
#+end_src 

Alice is working on the same files. When she tried to push, she
realized that she first need to integrate Bob's changes as well.
#+begin_src sh :results output :session Bob
# Edit file1 on a separate part
# editor file1
# Edit file2 on a common part
# editor file2
git commit -am "explain type of changes"
git push
# Problem cannot push before pulling the latest version
git pull
# One file was merged without a problem, conflict for the other
# launch conflict resolver, resolve the problem
# Commiting a merged version to the Repository
git add file2
git commit -m "solving a conflict with Bob"
git push
#+end_src 

Bob gets the changes from Alice.
#+begin_src sh :results output :session Bob
git pull
#+end_src 

** Show and explain SmartGit
- Explain the windows and main buttons
- Open Log and explain windows and main buttons
- Show what the previous Alice-Bob mini example generated in history for Alice
- Show what the previous Alice-Bob mini example generated in history for Bob (new Log frame)
** Create and solve conflict using SmartGit
- Repeat a conflict situation in Alice and Bob terminals, and do add, commit, push, pull in the SmartGit
- Resolve the conflict situation in SmartGit using conflict solver
- Do not push anything, just resolve locally
** Explain merge/rebase
- Explain the difference between the two
- Explain what is SmartGit doing by default and why (it is a configurable option)
** Branches
- Create and checkout a new branch in SmartGit for Alice
- Add two commits in a new branch
- Bob adds one commit in a master branch
- Alice does checkout of the master branch and then merge with her development branch
- Explain how possible conflicts can be resolved in the same way as before
** Rescue
- Add some changes to a file
- Stash them
- Apply stash
- Commit changes
- Reset them
- Revert one the older commits
** TODO git wdiff
** TODO Many Git for Coding examples
** TODO Some kind of git xp demo (with or without special commands)
* Emacs Setup                                                      :noexport:
This document has local variables in its postembule, which should
allow org-mode to work seamlessly without any setup. If you're
uncomfortable using such variables, you can safely ignore them at
startup. Exporting may require that you copy them in your .emacs.

# Local Variables:
# eval:    (setq org-latex-listings 'minted)
# eval:    (setq org-latex-minted-options '(("bgcolor" "Moccasin") ("style" "tango") ("numbers" "left") ("numbersep" "5pt")))
# End:

