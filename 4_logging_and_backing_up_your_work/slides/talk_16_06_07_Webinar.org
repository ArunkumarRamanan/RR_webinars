#+TITLE:     Reproducible Research, Open Science \newline \bgroup\bf Logging and backing up your work\egroup \newline Git Tips and Tricks, a Scientist Perspective
#+AUTHOR:    V. Danjean, A. Legrand, L. Stanisic\newline University of Grenoble, CNRS, Inria Bordeaux
#+DATE: June 7, 2016 -- Reproducible Research Webinar (Episode IV)

#+STARTUP: beamer overview indent
#+TAGS: noexport(n)
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [11pt,xcolor=dvipsnames,presentation]
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+TAGS: Vincent(V) Arnaud(A) Luka(L)

#+LATEX_HEADER: \let\AtBeginDocumentSav=\AtBeginDocument
#+LATEX_HEADER: \def\AtBeginDocument#1{}
#+LATEX_HEADER: \input{org-babel-style-preembule.tex}
#+LATEX_HEADER: \let\AtBeginDocument=\AtBeginDocumentSav

#+LATEX_HEADER: %\let\tmptableofcontents=\tableofcontents
#+LATEX_HEADER: %\def\tableofcontents{}
#+LATEX_HEADER:  \usepackage{color,soul}
#+LATEX_HEADER:  \definecolor{lightorange}{rgb}{1,.9,.7}
#+LATEX_HEADER:  \sethlcolor{lightorange}
#+LATEX_HEADER:  \definecolor{lightgreen}{rgb}{.7,.9,.7}
#+LATEX_HEADER:  \let\hrefold=\href
#+LATEX_HEADER:  \renewcommand{\href}[2]{\hrefold{#1}{\SoulColor{lightorange}\hl{#2}}}
#+LATEX_HEADER: \newcommand{\muuline}[1]{\SoulColor{lightorange}\hl{#1}}
#+LATEX_HEADER: \makeatletter
#+LATEX_HEADER: \newcommand\SoulColor[1]{%
#+LATEX_HEADER:   \sethlcolor{#1}%
#+LATEX_HEADER:   \let\set@color\beamerorig@set@color%
#+LATEX_HEADER:   \let\reset@color\beamerorig@reset@color}
#+LATEX_HEADER: \makeatother
#+LATEX_HEADER: \let\oldtexttt=\texttt
#+LATEX_HEADER: \renewcommand\texttt[1]{\SoulColor{lightgreen}\hl{\tt#1}}

*** TODO Stuff to do [3/7]                                       :noexport:
- [X] Slide 3 items are strange
- [ ] Update the Introduction
- [ ] Update Git for Coding
- [ ] Scavange the pad (https://pad.inria.fr/p/fQtZqvTTERRqx9ug)
- [X] Find a way so that =inline commands= display nicely (e.g.,
  highlighted in green).
- [X] Strange space sometimes before links and green git commands (e.g., after left parenthesis)
- [ ] Include sharelatex into presentation
** 
#+LaTeX: \input{org-babel-document-preembule.tex}
*** Foreword about the organization (1/2)
There is currently a screencast of this seminar:
#+BEGIN_CENTER
  #+LaTeX: \href{https://mi2s.imag.fr/pm/direct}{https://mi2s.imag.fr/pm/direct}
#+END_CENTER
The resulting video will be edited and available from GitHub that
gathers all the information, slides, and resources:
#+BEGIN_CENTER
  #+LaTeX: \href{https://github.com/alegrand/RR_webinars/blob/master/README.org}{https://github.com/alegrand/RR\_webinars/blob/master/README.org}
#+END_CENTER

There is a few seconds delay between what we say and the
screencast. We can have almost live interaction with other sites by
using *pad* to comment and ask questions
#+BEGIN_CENTER
  #+LaTeX: \href{http://tinyurl.com/RRW-pad4}{http://tinyurl.com/RRW-pad4}
#+END_CENTER
*** Foreword about the organization (2/2)
No particular prerequisites: we will use command line and demo with a
GUI
- Please install =Git= and =SmartGit= by following the [[https://github.com/alegrand/RR_webinars/blob/master/4_logging_and_backing_up_your_work/index.org\#practical-session-requirements][instructions given
  on the RR_webinars GitHub page]]


- 1. General introduction plus basic Git usage :: ($\approx$ an hour) 
     At any time, feel free to ask questions *on the pad*. Some of these
     questions may be addressed "silently" by the other attendees, but
     do not hesitate to ask it out loudly for the remote ones
- 2. A short break :: 
- 3. Slightly more advanced Git usage :: the actual part that is more
     devoted to practices favoring reproducible research
**** Many other tutorials on Git but with a different perspective
- [[https://www.youtube.com/watch?v=ZDR433b0HJY][Introduction to Git internals by Scott Chacon (GitHub)]] 
- [[https://www.youtube.com/watch?v=o4PFDKIc2fs][Please. Stop Using Git by Matthew McCullough]] $\winkey$
#+LaTeX: \vspace{-1em}\begin{columns}\begin{column}[t]{.42\linewidth}
- \href{http://try.github.com/}{http://try.github.com/}
- \href{http://gitimmersion.com/}{http://gitimmersion.com/}
#+LaTeX: \end{column}\hspace{-1.2em}\begin{column}[t]{.59\linewidth}
- \href{http://git-scm.com/docs/gittutorial/}{http://git-scm.com/docs/gittutorial/}
#+LaTeX: \end{column}\end{columns}

*** Outline
\tableofcontents
* Introduction to Git and its Eco-system
*** Challenges: History and Parallelism
#+LaTeX: \vspace{-.3cm}
****                                                     :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
***** 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.55
     :END:

- _Printed doc+handwritten revisions_:
  + Many versions of the file
  + One writer, multiple reviewers\smallskip
- _Doc+email+contributions_: 
  + Many versions of the file
  + Never sure which one is the latest
  + Not aware of others corrections
  + No clear history
  + Merging contributions
  + Problems editing same paragraphs\smallskip
- _Doc+Dropbox or google-doc_:
  + Limited history through autosaves\\
    (30 days on dropbox)
  + Limited parallelism
  + Coworker deletes everything\dots
***** 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.45
     :END:

#+BEGIN_CENTER
\includegraphics[scale=.25]{figures/phd_comics.png}
#+END_CENTER

****                                                     :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

\medskip
#+BEGIN_CENTER
You need a *real version control system*

that allows for a truly *parallel asynchronous* edition
#+END_CENTER
*** Remember "/The Dog Ate my Homework !!!/"
#+BEGIN_LaTeX
  \bottomcite{Collberg, Christian \textit{et Al.}, 
     \href{http://reproducibility.cs.arizona.edu/v2/RepeatabilityTR.pdf}{\textit{Measuring Reproducibility in Computer Systems Research}},
    \url{http://reproducibility.cs.arizona.edu/}\qquad 2014,2015} 

  \begin{columns}
    \begin{column}{.5\linewidth}
      ~\includegraphics[height=3.5cm]{figures/repeatability_arizona.pdf}
    \end{column}
    \begin{column}{.5\linewidth}
      \small
      \begin{itemize}
      \item 8 ACM conferences ({\scriptsize ASPLOS'12, CCS'12, OOPSLA'12, OSDI'12,
        PLDI'12, SIGMOD'12, SOSP'11, VLDB'12}) and 5 journals
      \item More than 80\% of non reproducible work
      \end{itemize}
    \end{column}
  \end{columns}
#+END_LaTeX
#+BEGIN_LaTeX
  \begin{center}
    \ul{Common issues:} \alert<1-2>{Versioning Problems} and \alert<3>{Bad Backup Practices}
  \end{center}
  \vspace{-.2cm}

  \begin{block}{}
  \vspace{-.4cm}
  \begin{overlayarea}{\linewidth}{2.8cm}
      \small
      \only<1>{
        \begin{quote}
          Thanks for your interest in the implementation of our
          paper. The good news is that I was able to find some code. I
          am just \alert{hoping} that \alert{it} is a stable working
          version of the code, and \alert{matches the implementation we
            finally used for the paper}. Unfortunately, I have
          \alert{lost some data} when \alert{my laptop was stolen} last
          year. The bad news is that the code is not commented and/or
          clean.
        \end{quote}
      }
      \only<2>{
        \begin{quote}
          Attached is the $\langle$system$\rangle$ source code of our
          algorithm. Iâ€™m \alert{not} very \alert{sure whether it is the
            final version of the code used in our paper}, but it should
          be at least 99\% close. Hope it will help.
        \end{quote}}%
      \only<3>{
        \begin{quote}
          Unfortunately, the server in which my implementation was
          stored had a \alert{disk crash in April and three disks
            crashed simultaneously}. While the help desk made
          significant effort to save the data, my entire implementation
          for this paper was not found.
        \end{quote}}
    \end{overlayarea}
  \end{block}
  \null\vspace{-.4cm}
#+END_LaTeX
*** History: Centralized Version Control System
****                                                     :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
***** 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.6
     :END:
- RCS (1982), CVS (1986), SVN (2000)
- Client/Server interactions
- Local copies of files/remote history

*Main issues:*
1. No local history
   #+LaTeX: \setlength{\leftmarginii}{0pt}
  - requires a permanent network connection
  - commits are immediately visible to everyone\\
    $\leadsto$ few (and large) commits, conflicts $\frowny$

***** 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.4
     :END:
#+LaTeX: \hbox{%
\hspace{-.6em}\includegraphics[scale=.24]{figures/centralized_vcs.pdf}\hspace{-4em}
#+LaTeX: }
****                                                        :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:


#+LaTeX: \begin{enumerate}\setcounter{enumi}{1}

#+LaTeX: \item Managing Access (Read/Write)
#+LaTeX:    \setlength{\leftmarginii}{0pt}
  - =UNIX= groups and =ssh=. *forge* make your life so much easier
    - Web management and easy access to files and history
    - Bug Tracking System, Mailing Lists, Wikis, ...
  - This does not scale (socially): $\leadsto$ send series of =patch= 
    #+LaTeX: \!\!es $\frowny$
#+LaTeX: \end{enumerate}

\null\vspace{5cm}
*** History: Decentralized Version Control System
****                                                     :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
***** 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.6
     :END:
- BitKeeper (1998), Arch (2001), Darcs (2003), Bazaar/Git/Mercurial
  (2005)
- Peer-to-peer and/or Client/Server
- Full local history

*Git birth:*  \vspace{-.5em}
#+LaTeX: \setlength{\leftmargini}{12pt}\small
- BitKeeper was used by the Linux kernel dev. community\vspace{-.5em}
- BK. withdrawn gratis use of the product for reverse-engineering
  reasons\vspace{-.5em}
***** 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.4
     :END:
#+LaTeX: \hbox{%
\hspace{-.6em}\includegraphics[scale=.24]{figures/decentralized_vcs.pdf}\hspace{-4em}
#+LaTeX: }
****                                                        :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+LaTeX:    \bgroup\setlength{\leftmargini}{9pt}\small
- Torvalds needed performance. He coded git in 2 weeks and used
  it for releasing the next kernel 2 weeks after $\smiley$ \vspace{-.5em}
#+LaTeX: \egroup

*Pros:*
- Allows local commit without any access on the server
- Allows large scale collaboration (everyone pulls from Linus)
- Many web/cloud deployments: gitorious, github, bitbucket, gitlab
\null\vspace{5cm}

*** Setting up Git
- Tools :: =git= originates from linux so it is *command line* oriented.
     #+LaTeX:    \setlength{\leftmarginii}{0pt}

  - There are many convenient GUIS. E.g., =SmartGit= or even =magit= \winkey
  - See the [[https://github.com/alegrand/RR_webinars/blob/master/4_logging_and_backing_up_your_work/index.org\#practical-session-requirements][instructions given on the RR_webinars GitHub page]]
- Accessing servers :: setup your SSH public/private key to avoid
     typing passwords all the time (see [[http://siteadmin.gforge.inria.fr/FAQ.html\#Q6][How do I setup ssh (even on windows?)]])
- Provide your name :: All this will go in your =~/.gitconfig= \small
     #+BEGIN_EXAMPLE
     git config --global user.name "Your Name Comes Here"
     git config --global user.email you@yourdomain.example.com     
     #+END_EXAMPLE
- Customize even more :: \scriptsize\quad

     #+BEGIN_EXAMPLE
[color]
	diff = auto
	status = auto
	branch = auto
[alias]
	wdiff = diff --color-words
	hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
[branch]
	autosetuprebase = always        # you may not want this... 
[push]
	default = simple                # you may not want this... 
     #+END_EXAMPLE
*** Basic usage (demo)
#+BEGIN_LaTeX
    \vspace{-.8em}
    \begin{center}
    \includegraphics[width=.9\linewidth]{figures/git_basic.pdf}\\%
    \end{center}
    %
    \vspace{-.8em}
    \begin{flushright}
      \tiny
      \emph{Inspired by \href{https://github.com/HackBerkeley/intro-git}{HackBerkeley}}
    \end{flushright}
    \vspace{-.8em}
#+END_LaTeX

You have a complete stand-alone local history!\dots

- =git clone= / =git init= (initialize the DB)
- =git pull= sync from the remote repos
  - (actually =git pull= = =git fetch ; git rebase= in simple contexts)
- =git push= sync to the remote repos
- =git add= and =git commit= (or =git commit -a= if you really don't care)

This is the basic *linear history*, very similar to an incremental
backup.
- If you put such commands in a =crontab -e=, you will get a
  =timemachine/backuppc/...=

But =git= is much more than this.
*** Actually there are branches... (demo)
****                                                     :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
***** 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.7
     :END:
- =git merge=
- =gitk= or equivalent
  - =git checkout= allows to switch from a branch to an other
  - You can easily create a (local) branch to mess around. You're
    safe! \winkey
- =git pull= $=$ =git fetch; git rebase= or =git fetch; git merge=
  - Question: What is the difference ? $\winkey$
***** 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.3
     :END:
#+LaTeX: \hbox{%
\includegraphics[width=\linewidth]{figures/TypicalMerge.png}
#+LaTeX: }
****                                                        :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

\pause
#+BEGIN_CENTER
  \includegraphics[width=.8\linewidth]{figures/loopy_vs_nice.png}

  It's is a matter of taste... \winkey
#+END_CENTER

* Git for Writing Articles
*** Outline
#+LaTeX: \tableofcontents[current,currentsubsection]
*** Collaborative Writing using Git
- Multiple collaborators editing the same file *simultaneously offline*
- Everyone *commits locally*, occasionally merging to remote
- If editing different paragraphs
  $\leadsto$ *automatic merge*
- If editing same paragraphs
  $\leadsto$ need to *handle conflicts*

\medskip 
#+BEGIN_CENTER
Everyone has a clean history of the whole article writing process,

with all intermediary versions
#+END_CENTER


*** Working with Textual Files
- Necessary so Git can make difference between commits
- Common solutions: LaTeX, markdown, Org-mode, etc.
- Nowadays many user-friendly environments for LaTeX
- No dependencies on (proprietary) software tools

\medskip
**** Advanced usage
Alternatively convert binaries into text files:
  + =git oodiff= (based on odt2txt conversion) for OpenOffice files (.odt, .odp, etc.)
  + [[http://blog.martinfenner.org/2014/08/18/introducing-rakali/][rakali]] (based on pandoc conversion) for Office files (.doc, .docx, etc.) 

*** Typical Workflow
- Basic commands:
  1. Setup repository (=git config=, =git clone=)
  2. Update to the latest version (=git pull=, =git fetch=)
  3. Contribute with your changes (=git commit -a=, =git push=)
- Commands for handling conflicts:
  1. Compare two versions (=git diff=)
  2. Use conflict solvers
  3. Merge or rebase (=git merge=, =git rebase=)
- Commands for finding the previous version:
  1. Going for a particular version (=git checkout SHA1=)

*** Useful Tips and Tricks
#+LaTeX: \begin{flushright}\scriptsize 
  Inspired by [[https://homes.cs.washington.edu/~mernst/advice/version-control.html][Michael Ernst]]
#+LaTeX: \end{flushright}\vspace{-.8cm}

\setlength{\leftmarginii}{12pt}

- Use a *descriptive commit* message
  #+LaTeX: \only<1>{\newline}{\includegraphics<1>[width=.7\linewidth]{figures/git_commit.png}}\pause
- Make each commit a *logical unit*: =git add file1 file2 ; git commit=
- Avoid indiscriminate commits
  - =git status=, =git diff= and _do not_ Â  =git commit -a=!!!
  - =git wdiff=\pause
- Do *frequent local commits* (it's safe $\smiley$)
- Incorporate others' changes frequently (=git pull=)
- Share your changes frequently (=git push=)\pause
- Remember that the tools are *line-based*
  - _Never_ refill/rejustify paragraphs
  - Do not write excessively looooong lines (<80 characters)\pause
- Don't commit generated files
  - Don't version temporary LaTeX files (.aux, .toc, etc.), use
    =.gitignore=
  - Don't version the result .pdf (\bgroup \scriptsize unless your
    collaborators have problems generating it\egroup). Add only the
    final version of the .pdf, possibly with a unique name

**** Advanced usage
If you collaborate with SVN users, you may enjoy =git svn=
* Git for Coding
*** Outline
#+LaTeX: \tableofcontents[current,currentsubsection]
*** Git for coding (history matters!)
- Remember: _commit often_. In this context, the =git stash= command can
  be useful.
  - Allows you to code/test/... with no fear
  - =git reset= / =git revert=
- Region based committing (=git commit --patch= although nobody does
  that through the CLI)
  - Working at a fine granularity allows the next ones to better
    understand what was done and decreases the risks of conflicts
- Locally rewriting your history (=git rebase -i bc23b0f=) before
  publishing it with =git push=
- Such history can then be exploited:
  - =git log= (=git hist=), =git blame=, =git bisect=
  \scriptsize
  #+BEGIN_EXAMPLE
  git config --global alias.hist \
      'log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short'
  #+END_EXAMPLE
*** Rescue ! Advanced?
#+BEGIN_QUOTE
Git is really pretty simple, just think of branches as homeomorphic
endofunctors mapping submanifolds of a Hilbert space \winkey
#+END_QUOTE
\vspace{-1em}
****                                                     :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
***** 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.7
     :END:

\setlength{\leftmarginii}{12pt}
- Don't force it and don't panic... Call a friend. 
  - Everything is stored in git backend and identified by a SHA1
  - Anything is saved as soon as it is in the backend (=git add=)
- Several ways to recover objects/files states
  that cannot be reached by the classical history:
  - =git fsck= to find unreachable files/commits/...
  - =git reflog= (for emergency) generally more useful than =git fsck= for
    recovering a previous repository state (i.e., a previous commit)
- A few dangerous commands:
  - =git gc= removes unreachable old objects
    #+LaTeX: \hbox{\scriptsize($>$2 weeks)\hspace{-1cm}}
  - =git prune= removes unreachable objects...
  - =rm -rf= without pushing (or cloning 
    #+LaTeX: \hbox{elsewhere) before\hspace{-3cm}}
***** 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.3
     :END:
\includegraphics[width=\linewidth]{figures/git_xkcd.png}
*** Git for coding (branches)
\vspace{-1em}
- Merging branches :: \quad
  - *Why?* Long term work to keep in sync with the rest of the world (e.g.,
    translating some code for internationalization)
  - *Merging* ("public" branch but where you're the only developer)
    vs. *rebasing* (cleaner final set of patches, but the backup is more
    complex to set up) .
    #+BEGIN_CENTER
    \includegraphics[width=.8\linewidth]{figures/loopy_vs_nice.png}\vspace{-1.4em}
    #+END_CENTER
  - Depends on the meaning of the history wished within the
    project. Rebasing can be better for code review (sometimes, some
    part of the history are useless).
\pause
****                                                     :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
***** 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.7
     :END:

Developers who do not understand this mechanism quickly end up with a
huge plate of spaghetti $\frowny$
- =git workflow= (supported by SmartGit)
***** 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.3
     :END:

\vspace{-.8cm}
\includegraphics[width=\linewidth]{figures/bikesoup-history.png}
\vspace{-2cm}
*** Git Workflow
#+BEGIN_CENTER
\href{http://nvie.com/posts/a-successful-git-branching-model/}{http://nvie.com/posts/a-successful-git-branching-model/}

\includegraphics[scale=.14]{figures/git_workflow.png}
#+END_CENTER
*** Access rights 
- _Forge_ :: the UNIX groups philosophy still works
- _Linux_ :: \quad
  - Linus Torvalds integrates from a few trusted developpers who
    themselves turn integrate from various developpers
  - Everyone pulls from Linus Torvalds
- _GitHub_ :: organization (similar to UNIX groups) are
     possible but encourages *fork* and *pull requests* done through their
     interface
  #+BEGIN_CENTER
  \includegraphics[width=.7\linewidth]{figures/centralized-github-4.png}  
  #+END_CENTER

* Git for Experiments/Data/Provenance Tracking
*** Outline
#+LaTeX: \tableofcontents[current,currentsubsection]
*** Git for Managing a Laboratory Notebook
- Versioning *all scripts* for running experiments, pre-processing raw data, analysis and presentation
- Backing up *read-only* experiment results
- *Commit often* and separate different types of commits
- Git history helps in *understanding* and *reproducing* experiment results

\medskip
**** Major Challenges
  1. May depend on other projects
  2. Large files and thus repositories
  3. Linear history hard to explore and thus exploit

*** Integrating Multiple Git Sources

#+BEGIN_LaTeX
\begin{center}
\fbox{\includegraphics[width=.6\linewidth]{figures/submodules.pdf}}
\end{center}
#+END_LaTeX

- Pulling and pushing changes to both projects
- Several solutions (=git submodule=, =git subrepo=)
- Work well for simple Git inside Git, but not for advanced use cases (SVN, complex branches, etc.)

*** Handling Large Files

- Cloning takes forever $\frowny$
- Occupies a lot of disk space (especially for multiple projects)
- Several solutions (=git lfs=, =git annex=)
- Probably soon becoming part of the standard (similar to Mercurial)

*** Improving Git History: git-labbook (demo)
#+BEGIN_LaTeX
\begin{figure}
  \centering

  \includegraphics<1>[width=.6\linewidth]{figures/gitxp.pdf}
  \includegraphics<2>[width=.6\linewidth]{figures/gitxp2.pdf}

\end{figure}
#+END_LaTeX

  - Get the data you're interested in
  - Track provenance (can also be done in labbook)
  - Explore and reset experiment conditions
  - Expand to write an article

*** Benefits from Proposed Branching System
#+BEGIN_LaTeX
\begin{figure}
  \centering

  \includegraphics<1>[width=.8\linewidth]{figures/author_reader_br_1.fig}
  \includegraphics<2>[width=.8\linewidth]{figures/author_reader_br_2.fig}
  \includegraphics<3>[width=.8\linewidth]{figures/author_reader_br_3.fig}

\end{figure}
#+END_LaTeX

#+BEGIN_LaTeX
\begin{itemize}
   \item<1->Keeps data and code that generated it together, yet isolated
   \item<2->Facilitates experiment reproduction and analysis replication
   \item<3>Unites all phases of typical research study
\end{itemize}
#+END_LaTeX

* Git for Publishing
*** Outline
#+LaTeX: \tableofcontents[current,currentsubsection]
*** Making Repository Publicly Available
- External researchers can improve or build upon your work
- Exploring Git history allows for deeper understanding of the project evolution, not only the final results
  $\leadsto$ *improved reproducibility*

\medskip

- Comes as a natural step if the initial study was performed with a clean methodology ([[https://anonsvn:anonsvn@gforge.inria.fr/plugins/scmgit/cgi-bin/gitweb.cgi?p=starpu-simgrid/starpu-simgrid.git;a=tree][example]])
- Some may have valid reasons for not doing so (copyright, company policy, implementation parts that the authors do not wish to disclose now, etc.)

*** Making Repositories Citeable and Durable
**** _Citable_: GitHub + Zenodo
- Providing DOI to the release of your GitHub 
#+BEGIN_LaTeX
\centering
\hrefold{https://zenodo.org/badge/latestdoi/10971/stanisic/RR\_example}{\includegraphics[scale=.5]{figures/zenodo_51269.png}}
#+END_LaTeX
- Your code becomes "citable" (\bgroup \small although not necessarily
  easier to access \winkey\egroup)
- Easy to use: [[https://guides.github.com/activities/citable-code/][follow the instructions]]
- [[https://github.com/arfon/fidgit][GitHub+figshare]]: similar approach for figshare

**** _Durable_: Software Heritage
#+BEGIN_LaTeX
\begin{flushright}
  \includegraphics[width=.4\linewidth]{figures/software_heritage.png}
\end{flushright}
\vspace{-4.5em}
#+END_LaTeX
- None of this archiving is really durable\\
  \bgroup \small (Google Code, Gitorious, Code Spaces, ...)\egroup
- Impressive ongoing work lead by Roberto Di Cosmo
  #+BEGIN_LaTeX
  \begin{center}
    \href{https://wg.softwareheritage.org/}{https://wg.softwareheritage.org/}
  \end{center}
  #+END_LaTeX
  \bgroup \small Full development history of Debian, GitHub, GNU,
  Gitorious, google code, ... \egroup
* Conclusion and Perspective
** 
*** Outline
#+LaTeX: \tableofcontents
*** Where do we stand now?
*We did one such webinar per month*. We will stop during summer and
resume in mid September with other topics (workflows, data and
software archiving, evaluation challenges, ...).
- I need volunteers! $\smiley$
- Announcement on 
  [[http://listes.univ-orleans.fr/sympa/subscribe/recherche-reproductible][\small recherche-reproductible@listes.univ-orleans.fr\normalsize]] and
  a few others but do not hesitate to crosspost.

\textbf{Next webinars:} New season in September!

#+BEGIN_CENTER
  #+LaTeX: \vspace{-.4em}
  #+LaTeX: \href{https://github.com/alegrand/RR_webinars/blob/master/README.org}{https://github.com/alegrand/RR\_webinars}
#+END_CENTER
* Git demo                                                         :noexport:
** Basic operations

Alice configure its initial git.
#+begin_src sh :results output :session Alice
# Change LOGNAME, HOME and PS1 to avoid a real new login
source setup-alice
# Basic git setup
git config --global user.name Alice
git config --global user.email alice@provider.com
#+end_src

Alice clones the project.
#+begin_src sh :results output :session Alice
# Download the project
git clone git@github.com:vdanjean/ocl-icd.git
cd ocl-icd
# Update to the latest version
git pull
#+end_src

Bob clones the same project.
#+begin_src sh :results output :session Bob
source setup-alice
# Download the project
git clone git@github.com:vdanjean/ocl-icd.git
cd ocl-icd
# Update to the latest version
git pull
#+end_src

Alice makes a change to an existing file and adds a new one
(illustrate with =gitk -a=).
#+begin_src sh :results output :session Alice
# Edit existing file
vi README
# Check the current changes in Working directory
git status
# Adding the modifications to the Index
git add README
# Check the current changes in Working directory
git status
# Create a new file and write something inside
vi README.alice
# Check the current changes in Working directory
git status
# Add the file to the Index
git add README.alice
# Check the current changes in Working directory
git status
# Commiting indexed changes to the Local Repository
git commit -m "explain type of changes"
# Check the current changes in Working directory
git status
# Pushing changes to the Remote Repository
git push
#+end_src

Bob gets the modifications.
#+begin_src sh :results output :session Bob
# Check the current changes in Working directory
git status
# Update to the latest version
git pull
#+end_src

** Basic GUI for commiting
=git gui= (with amend) and =gitk=

** Create and solve conflict

Bob is working on two files.
#+begin_src sh :results output :session Bob
# Edit file1 on a separate part
vi README
# Edit file2 on a common part
vi README.alice
git commit -am "this is our version"
git config --global user.name Bob
git config --global user.email bob@otherprovider.com
git commit --amend --reset-author
git push
#+end_src 

Alice is working on the same files. When she tried to push, she
realized that she first need to integrate Bob's changes as well.
#+begin_src sh :results output :session Bob
# Edit file1 on a separate part
vi README
# Edit file2 on a common part
vi README.alice
git commit -am "Improve my version"
git push
# Problem cannot push before pulling the latest version
git pull
# One file was merged without a problem, conflict for the other
# launch conflict resolver, resolve the problem
# Commiting a merged version to the Repository
git add README.alice
git commit -m "solving a conflict with Bob"
git push
#+end_src 

Bob gets the changes from Alice.
#+begin_src sh :results output :session Bob
git pull
#+end_src 

** Show and explain SmartGit
- Explain the windows and main buttons
- Open Log and explain windows and main buttons
- Show what the previous Alice-Bob mini example generated in history for Alice
- Show what the previous Alice-Bob mini example generated in history for Bob (new Log frame)
** Create and solve conflict using SmartGit
- Repeat a conflict situation in Alice and Bob terminals, and do add, commit, push, pull in the SmartGit
- Resolve the conflict situation in SmartGit using conflict solver
- Do not push anything, just resolve locally
** Explain merge/rebase
- Explain the difference between the two
- Explain what is SmartGit doing by default and why (it is a configurable option)
** Branches
- Create and checkout a new branch in SmartGit for Alice
- Add two commits in a new branch
- Bob adds one commit in a master branch
- Alice does checkout of the master branch and then merge with her development branch
- Explain how possible conflicts can be resolved in the same way as before
** Rescue
- Add some changes to a file
- Stash them
- Apply stash
- Commit changes
- Reset them
- Revert one the older commits
** TODO git wdiff
** TODO Many Git for Coding examples
** TODO Some kind of git xp demo (with or without special commands)
* Emacs Setup                                                      :noexport:
This document has local variables in its postembule, which should
allow org-mode to work seamlessly without any setup. If you're
uncomfortable using such variables, you can safely ignore them at
startup. Exporting may require that you copy them in your .emacs.

# Local Variables:
# eval:    (setq org-latex-listings 'minted)
# eval:    (setq org-latex-minted-options '(("bgcolor" "DarkSeaGreen2") ("style" "tango") ("numbers" "left") ("numbersep" "5pt")))
# End:

